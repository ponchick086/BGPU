// Класс Дом
class House {
    private Room room;
    
    // Конструктор класса Дом
    public House(Room room) {
        this.room = room;
    }
    
    // Метод для получения информации о комнате в доме
    public void getRoomInfo() {
        System.out.println("В доме есть комната с площадью " + room.getArea() + " кв.м");
    }
}

// Класс Комната
class Room {
    private double area;
    
    // Конструктор класса Комната
    public Room(double area) {
        this.area = area;
    }
    
    // Метод для получения информации о площади комнаты
    public double getArea() {
        return area;
    }
}

// Главный класс
public class Main {
    public static void main(String[] args) {
        // Создание объекта комнаты
        Room room = new Room(20.0);
        
        // Пример композиции: создание объекта дома, который содержит объект комнаты
        House house = new House(room);
        house.getRoomInfo(); // Выводит "В доме есть комната с площадью 20.0 кв.м"
        
        // Пример агрегации: создание объекта комнаты, который не принадлежит ни одному дому
        Room room2 = new Room(15.0);
        System.out.println("Площадь комнаты: " + room2.getArea() + " кв.м"); // Выводит "Площадь комнаты: 15.0 кв.м"
    }
}
```

В этом примере класс `House` представляет дом, а класс `Room` представляет комнату. В классе `House` есть поле `room`, которое является объектом класса `Room`. 

Пример композиции: в конструкторе класса `House` передается объект комнаты, и этот объект сохраняется в поле `room`. Таким образом, объект комнаты является неотъемлемой частью объекта дома. При удалении объекта дома, также будет удален и объект комнаты.

Пример агрегации: в методе `main()` создается объект комнаты `room2`, который не принадлежит ни одному дому. Объект комнаты существует независимо от объекта дома. При удалении объекта комнаты, дом не будет затронут.
