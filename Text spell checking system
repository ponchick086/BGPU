import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class TextEditor extends JFrame implements ActionListener {
    private JTextArea textArea;
    private JMenuBar menuBar;
    private JMenu fileMenu;
    private JMenuItem openItem, saveItem, exitItem;
    private Map<String, String> wordMap;
    private AutoReplaceWorker autoReplaceWorker;
    
    public TextEditor() {
        setTitle("Text Editor");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        textArea = new JTextArea();
        textArea.setFont(new Font("Arial", Font.PLAIN, 14));
        textArea.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                startAutoReplaceWorker();
            }
            
            public void removeUpdate(DocumentEvent e) {
                startAutoReplaceWorker();
            }
            
            public void changedUpdate(DocumentEvent e) {
                startAutoReplaceWorker();
            }
        });
        
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        menuBar = new JMenuBar();
        fileMenu = new JMenu("File");
        
        openItem = new JMenuItem("Open");
        saveItem = new JMenuItem("Save");
        exitItem = new JMenuItem("Exit");
        
        openItem.addActionListener(this);
        saveItem.addActionListener(this);
        exitItem.addActionListener(this);
        
        fileMenu.add(openItem);
        fileMenu.add(saveItem);
        fileMenu.add(exitItem);
        
        menuBar.add(fileMenu);
        
        setJMenuBar(menuBar);
        add(scrollPane);
        
        wordMap = new HashMap<>();
        wordMap.put("teh", "the");
        wordMap.put("taht", "that");
        wordMap.put("woudl", "would");
        wordMap.put("shoudl", "should");
        
        setVisible(true);
    }
    
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == openItem) {
            // Действие при выборе "Open"
        } else if (e.getSource() == saveItem) {
            // Действие при выборе "Save"
        } else if (e.getSource() == exitItem) {
            System.exit(0);
        }
    }
    
    private void startAutoReplaceWorker() {
        if (autoReplaceWorker != null && !autoReplaceWorker.isDone()) {
            autoReplaceWorker.cancel(true);
        }
        
        autoReplaceWorker = new AutoReplaceWorker();
        autoReplaceWorker.execute();
    }
    
    private class AutoReplaceWorker extends SwingWorker<Void, Void> {
        private String text;
        
        protected Void doInBackground() throws Exception {
            text = textArea.getText();
            
            for (String wrongWord : wordMap.keySet()) {
                if (text.contains(wrongWord)) {
                    String correctWord = wordMap.get(wrongWord);
                    text = text.replaceAll(wrongWord, correctWord);
                }
            }
            
            return null;
        }
        
        protected void done() {
            if (!isCancelled()) {
                textArea.setText(text);
            }
        }
    }
    
    public static void main(String[] args) {
        new TextEditor();
    }
}
